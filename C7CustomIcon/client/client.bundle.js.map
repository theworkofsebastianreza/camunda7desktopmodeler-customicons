{"version":3,"file":"client.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://camunda-modeler-bpmn-js-plugin-example/./client/C7CustomIcon.js","webpack://camunda-modeler-bpmn-js-plugin-example/./node_modules/camunda-modeler-plugin-helpers/index.js","webpack://camunda-modeler-bpmn-js-plugin-example/webpack/bootstrap","webpack://camunda-modeler-bpmn-js-plugin-example/webpack/runtime/define property getters","webpack://camunda-modeler-bpmn-js-plugin-example/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-bpmn-js-plugin-example/webpack/runtime/make namespace object","webpack://camunda-modeler-bpmn-js-plugin-example/./client/client.js"],"sourcesContent":["class C7CustomIcon {\r\n  constructor(eventBus, elementRegistry, graphicsFactory, elementTemplates) {\r\n    this.eventBus = eventBus;\r\n    this.elementRegistry = elementRegistry;\r\n    this.graphicsFactory = graphicsFactory;\r\n    this.elementTemplates = elementTemplates;\r\n\r\n    // Event-Listener to check for changes in elements\r\n    this.eventBus.on('element.changed', (event) => {\r\n      const element = event.element;\r\n\r\n      // Check if Element is a Task\r\n      if (element.type === 'bpmn:Task') {\r\n\t\tthis.changeIcon(element);\r\n      }\r\n    });\r\n  }\r\n\r\n  changeIcon(element) {\r\n    const businessObject = element.businessObject;\r\n\tconst gfx = this.elementRegistry.getGraphics(element.id);\r\n\tif (gfx) {\r\n\t\t// Get the element template and check if it has an icon\r\n\t\tconst templateId = businessObject.modelerTemplate;\r\n\t\tconst template = templateId ? this.elementTemplates.get(templateId) : null;\r\n\r\n\t\tif (template && template.icon && template.icon.contents) {\r\n\t\t  const svgData = template.icon.contents;\r\n\t\t  // Add the Icon\r\n\t\t  this.addCustomIcon(element, svgData);\r\n\t\t}\r\n\t\telse { \r\n\t\t\t// Check if Icon already exists\r\n\t\t\tlet existingIcon = gfx.querySelector('.c7customicon');\r\n\t\t\tif (existingIcon) {\r\n\t\t\t  gfx.removeChild(existingIcon); // Remove old Icon\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  }\r\n\r\n  addCustomIcon(element, svgData) {\r\n    // Get Graphics of Element\r\n    const gfx = this.elementRegistry.getGraphics(element.id);\r\n\tif (gfx) {\r\n\t\t// Create a new <image>-Element for the icon\r\n\t\tconst image = document.createElementNS('http://www.w3.org/2000/svg', 'image');\r\n\t\timage.setAttributeNS(null, 'href', svgData);\r\n\t\timage.setAttributeNS(null, 'x', '5'); // Position relative to Task-Box\r\n\t\timage.setAttributeNS(null, 'y', '5'); // Position relative to Task-Box\r\n\t\timage.setAttributeNS(null, 'width', '20'); // Width of Icons\r\n\t\timage.setAttributeNS(null, 'height', '20'); // Height of Icons\r\n\t\timage.setAttribute('class', 'c7customicon'); // Class to identify\r\n\r\n\t\t// Prevent that Icon blocks interactions\r\n\t\timage.setAttributeNS(null, 'pointer-events', 'none');\r\n\r\n\t\t// Add icon to graphical element\r\n\t\tgfx.appendChild(image);\r\n\t}\r\n  }\r\n}\r\n\r\n// Injection-Dependencies for bpmn-js\r\nC7CustomIcon.$inject = [\r\n  'eventBus',\r\n  'elementRegistry',\r\n  'graphicsFactory',\r\n  'elementTemplates'\r\n];\r\n\r\n// export Plugin\r\nexport default {\r\n  __init__: ['C7CustomIcon'],\r\n  C7CustomIcon: ['type', C7CustomIcon]\r\n};","/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {Object} plugin\r\n * @param {String} type\r\n */\r\nexport function registerClientPlugin(plugin, type) {\r\n  var plugins = window.plugins || [];\r\n  window.plugins = plugins;\r\n\r\n  if (!plugin) {\r\n    throw new Error('plugin not specified');\r\n  }\r\n\r\n  if (!type) {\r\n    throw new Error('type not specified');\r\n  }\r\n\r\n  plugins.push({\r\n    plugin: plugin,\r\n    type: type\r\n  });\r\n}\r\n\r\n/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {import('react').ComponentType} extension\r\n *\r\n * @example\r\n *\r\n * import MyExtensionComponent from './MyExtensionComponent';\r\n *\r\n * registerClientExtension(MyExtensionComponent);\r\n */\r\nexport function registerClientExtension(component) {\r\n  registerClientPlugin(component, 'client');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerPlatformBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerPlatformBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerPlatformBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.platform.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerCloudBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerCloudBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerCloudBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.cloud.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerPlatformBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerPlatformBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerPlatformBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.platform.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerCloudBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerCloudBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerCloudBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.cloud.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerDmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerDmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerDmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'dmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerDmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const DmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\r\n * registerDmnJSPlugin(DmnJSModule, 'drd')\r\n */\r\nexport function registerDmnJSPlugin(module, components) {\r\n\r\n  if (!Array.isArray(components)) {\r\n    components = [ components ]\r\n  }\r\n\r\n  components.forEach(c => registerClientPlugin(module, `dmn.modeler.${c}.additionalModules`)); \r\n}\r\n\r\n/**\r\n * Return the modeler directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getModelerDirectory() {\r\n  return window.getModelerDirectory();\r\n}\r\n\r\n/**\r\n * Return the modeler plugin directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getPluginsDirectory() {\r\n  return window.getPluginsDirectory();\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBpmnJSPlugin } from 'camunda-modeler-plugin-helpers';\r\n\r\nimport C7CustomIcon from './C7CustomIcon';\r\n\r\n// Register a plugin for bpmn-js\r\nregisterBpmnJSPlugin(C7CustomIcon);"],"names":[],"sourceRoot":""}